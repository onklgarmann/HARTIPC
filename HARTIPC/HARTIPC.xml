<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HARTIPC</name>
    </assembly>
    <members>
        <member name="T:HARTIPC.FrameType">
            <summary>
            Predefined type to indicate message flow
            </summary>
        </member>
        <member name="F:HARTIPC.FrameType.STX">
            <summary>
            Start of transmission, master-to-slave.
            </summary>
        </member>
        <member name="F:HARTIPC.FrameType.ACK">
            <summary>
            Acknowledge message, slave-to-master.
            </summary>
        </member>
        <member name="T:HARTIPC.AddressFormat">
            <summary>
            Predefined type to indicate short address(1 byte), or unique ID(long address, 5 bytes).
            </summary>
        </member>
        <member name="F:HARTIPC.AddressFormat.Polling">
            <summary>
            Polling address, 1 byte
            </summary>
        </member>
        <member name="F:HARTIPC.AddressFormat.UniqueID">
            <summary>
            Unique ID, long address, 5 bytes
            </summary>
        </member>
        <member name="T:HARTIPC.HARTFrame">
            <summary>
            HARTFrame-class
            This object holds the binary info from a HART-frame. Serializable.
            </summary>
        </member>
        <member name="P:HARTIPC.HARTFrame._StartDelimiter">
            <value>
            Start delimiter, indicates AddressFormat and FrameType,
            bit 7 sets long(1) or short(0) address
            bit 0-2 sets master-to-slave(STX, 010), or slave-to-master(ACK, 110)
            burst(BACK, 001) is not implemented. 
            </value>
        </member>
        <member name="F:HARTIPC.HARTFrame._Address">
            <value>
            Address in bytes, 1 or 5 bytes.
            </value>
        </member>
        <member name="P:HARTIPC.HARTFrame.AddressFormat">
            <value>
            AddressFormat is either Polling(1 byte), or UniqueID(5 bytes)
            </value>
        </member>
        <member name="P:HARTIPC.HARTFrame.FrameType">
            <value>
            FrameType is STX or ACK
            </value>
        </member>
        <member name="P:HARTIPC.HARTFrame.Command">
            <value>
            Command byte
            </value>
        </member>
        <member name="P:HARTIPC.HARTFrame.ByteCount">
            <value>
            ByteCount represents the number of bytes between header and checksum.
            </value>
        </member>
        <member name="P:HARTIPC.HARTFrame.ResponseCode">
            <value>
            Response code indicates outgoing communications error
            ACK-frames only
            </value>
        </member>
        <member name="P:HARTIPC.HARTFrame.StatusCode">
            <value>
            Status code indicates device status
            ACK-frames only
            </value>
        </member>
        <member name="F:HARTIPC.HARTFrame._Payload">
            <value>
            Payload, if there is one
            </value>
        </member>
        <member name="P:HARTIPC.HARTFrame.Checksum">
            <value>
            Checksum is XOR of all bytes
            </value>
        </member>
        <member name="M:HARTIPC.HARTFrame.#ctor(System.Byte[],System.Byte,System.Byte[])">
            <summary>
            Constructor for HARTFrame object from values
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when arguments are out of range</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when non-nullable argumentes are null</exception>
            <param name="address">Byte array with 1 or 5 bytes.</param>
            <param name="command">Single byte</param>
            <param name="payload">Optional byte array</param>
        </member>
        <member name="M:HARTIPC.HARTFrame.#ctor(System.Byte[])">
            <summary>
            Constructor for HARTFrame from byte array
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="binary"/> length is less than 8</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="binary"/> is null</exception>
            <param name="binary">Byte array, min. length 8</param>
        </member>
        <member name="M:HARTIPC.HARTFrame.CalculateChecksum">
            <summary>
            Calculates XOR of all bytes in frame
            </summary>
            <returns>Single byte</returns>
        </member>
        <member name="M:HARTIPC.HARTFrame.Serialize">
            <summary>
            Formats complete frame as a byte array.
            </summary>
            <returns>HARTFrame as a byte array</returns>
        </member>
        <member name="M:HARTIPC.HARTFrame.GetAddress">
            <summary>
            Gets address
            </summary>
            <returns>Byte array</returns>
        </member>
        <member name="M:HARTIPC.HARTFrame.GetLength">
            <summary>
            Gets length
            </summary>
            <returns>Integer</returns>
        </member>
        <member name="M:HARTIPC.HARTFrame.GetPayload">
            <summary>
            Get data payload
            </summary>
            <returns>Byte array</returns>
        </member>
        <member name="M:HARTIPC.HARTFrame.GetAddress(System.Byte[],System.Byte[])">
            <summary>
            Sets 2 MSBs to 10 in combined DeviceType and DeviceID
            </summary>
            <param name="DeviceType">2 bytes</param>
            <param name="DeviceID">3 bytes</param>
            <returns>5-byte array</returns>
        </member>
        <member name="T:HARTIPC.MessageType">
            <summary>
            MessageTypes represents HART-IP flow-control with one byte.
            </summary>
        </member>
        <member name="F:HARTIPC.MessageType.Request">
            <summary>
            Request-message = 0
            </summary>
        </member>
        <member name="F:HARTIPC.MessageType.Response">
            <summary>
            Response-message = 1
            </summary>
        </member>
        <member name="F:HARTIPC.MessageType.Publish">
            <summary>
            Publish-message = 2
            </summary>
        </member>
        <member name="F:HARTIPC.MessageType.NAK">
            <summary>
            NAK-message = 15
            </summary>
        </member>
        <member name="T:HARTIPC.MessageID">
            <summary>
            MessageID representes HART-IP-frames function with one byte
            </summary>
        </member>
        <member name="F:HARTIPC.MessageID.Initiate">
            <summary>
            Initiate is sent to open a connection.
            </summary>
        </member>
        <member name="F:HARTIPC.MessageID.Close">
            <summary>
            Close is sent to close the connection.
            </summary>
        </member>
        <member name="F:HARTIPC.MessageID.KeepAlive">
            <summary>
            KeepAlives are sent regularly to keep the connection open.
            </summary>
        </member>
        <member name="F:HARTIPC.MessageID.PDU">
            <summary>
            PDU indicates that a HART-frame is attached as data.
            </summary>
        </member>
        <member name="F:HARTIPC.MessageID.Discovery">
            <summary>
            Discovery is sent as a broadcast on the network. Not implemented.
            </summary>
        </member>
        <member name="T:HARTIPC.HARTIPFrame">
            <summary>
            Represents a HART-IP-frame with or without data payload.
            </summary>
        </member>
        <member name="P:HARTIPC.HARTIPFrame.Version">
            <summary>
            HART-IP version, single byte
            </summary>
        </member>
        <member name="P:HARTIPC.HARTIPFrame.MessageType">
            <summary>
            MessageType, predefined type
            </summary>
        </member>
        <member name="P:HARTIPC.HARTIPFrame.MessageID">
            <summary>
            MessageID, predefined type
            </summary>
        </member>
        <member name="P:HARTIPC.HARTIPFrame.StatusCode">
            <summary>
            StatusCode, single byte
            </summary>
        </member>
        <member name="P:HARTIPC.HARTIPFrame.SequenceNumber">
            <summary>
            SequenceNumber, 2 bytes
            </summary>
        </member>
        <member name="P:HARTIPC.HARTIPFrame.ByteCount">
            <summary>
            Bytecount, 2 bytes.  Default 8 for header without payload.
            </summary>
        </member>
        <member name="F:HARTIPC.HARTIPFrame._Payload">
            <summary>
            Optional payload, byte array.
            </summary>
        </member>
        <member name="M:HARTIPC.HARTIPFrame.#ctor(System.UInt16,System.Byte,HARTIPC.MessageType,HARTIPC.MessageID,System.Byte,System.Byte[])">
            <summary>
            Constructor for <c>HARTIPFrame</c> that takes all values with defaults set up for KeepAlive-frame.
            </summary>
            <param name="sequenceNumber">ushort</param>
            <param name="version">single byte</param>
            <param name="messageType">MessageType</param>
            <param name="messageID">MessageID</param>
            <param name="statusCode">single byte</param>
            <param name="payload">optional byte array</param>
        </member>
        <member name="M:HARTIPC.HARTIPFrame.#ctor(System.Byte[])">
            <summary>
            Constructor for HARTIPFrame-class. Populates values from byte array.
            </summary>
            <param name="binary">byte array</param>
        </member>
        <member name="M:HARTIPC.HARTIPFrame.GetHeader">
            <summary>
            Gets the first 8 bytes of the HART-IP frame.
            </summary>
            <returns>HART-IP header as byte array</returns>
        </member>
        <member name="M:HARTIPC.HARTIPFrame.Serialize">
            <summary>
            Serializes entire HART-IP frame.
            </summary>
            <returns>HART-IP frame as byte array</returns>
        </member>
        <member name="M:HARTIPC.HARTIPFrame.GetPayload">
            <summary>
            Gets data payload from HART-IP frame.
            </summary>
            <returns>Payload as byte array</returns>
        </member>
        <member name="T:HARTIPC.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:HARTIPC.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:HARTIPC.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
