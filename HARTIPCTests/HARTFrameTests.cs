using Microsoft.VisualStudio.TestTools.UnitTesting;
using HARTIPC;
using System;
using System.Collections.Generic;
using System.Text;

namespace HARTIPC.Tests
{
    [TestClass]
    public class HARTFrameTests
    {
        #region ValidHARTFrame, binary
        [DataRow(new byte[] { 0x02, 0x80, 0x00, 0x00, 0x82 })]
        [DataRow(new byte[] { 0x82, 0xa6, 0x4e, 0x0b, 0x6f, 0xe4, 0x14, 0x00, 0xfe })]
        [DataRow(new byte[] { 0x06, 0x80, 0x00, 0x18, 0x00, 0x50, 0xfe, 0x26, 0x4e, 0x05, 0x07, 0x05, 0x02, 0x0e,
            0x0c, 0x0b, 0x6f, 0xe4, 0x05, 0x04, 0x00, 0x02, 0x00, 0x00, 0x26, 0x00, 0x26, 0x84, 0x58 })]
        [DataRow(new byte[] { 0x86, 0xa6, 0x4e, 0x0b, 0x6f, 0xe4, 0x14, 0x22, 0x00, 0x50, 0x77, 0x69, 0x68, 0x61,
            0x72, 0x74, 0x67, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89 })]
        [DataRow(new byte[] { 0x06, 0x80, 0x00, 0x18, 0x00, 0x50, 0xfe, 0x26, 0x4e, 0x05, 0x07, 0x05, 0x02, 0x0e, 
            0x0c, 0x0b, 0x6f, 0xe4, 0x05, 0x04, 0x00, 0x02, 0x00, 0x00, 0x26, 0x00, 0x26, 0x84, 0x58, 0x00, 0x01 })]
        #endregion
        [TestMethod()]
        public void HARTFrameValidBinaryTest(byte[] input)
        {
            IHARTFrame frame = new HARTFrame(input);
            Assert.IsInstanceOfType(frame, typeof(HARTFrame));
        }
        #region ValidHARTFrame, binary
        [DataRow(new byte[] { 0x02, 0x80, 0x00, 0x00, 0x82 })]
        [DataRow(new byte[] { 0x82, 0xa6, 0x4e, 0x0b, 0x6f, 0xe4, 0x14, 0x00, 0xfe })]
        [DataRow(new byte[] { 0x06, 0x80, 0x00, 0x18, 0x00, 0x50, 0xfe, 0x26, 0x4e, 0x05, 0x07, 0x05, 0x02, 0x0e,
            0x0c, 0x0b, 0x6f, 0xe4, 0x05, 0x04, 0x00, 0x02, 0x00, 0x00, 0x26, 0x00, 0x26, 0x84, 0x58 })]
        [DataRow(new byte[] { 0x86, 0xa6, 0x4e, 0x0b, 0x6f, 0xe4, 0x14, 0x22, 0x00, 0x50, 0x77, 0x69, 0x68, 0x61,
            0x72, 0x74, 0x67, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89 })]
        [DataRow(new byte[] { 0x06, 0x80, 0x00, 0x18, 0x00, 0x50, 0xfe, 0x26, 0x4e, 0x05, 0x07, 0x05, 0x02, 0x0e,
            0x0c, 0x0b, 0x6f, 0xe4, 0x05, 0x04, 0x00, 0x02, 0x00, 0x00, 0x26, 0x00, 0x26, 0x84, 0x58, 0x00, 0x01 })]
        #endregion
        [TestMethod]
        public void HARTFrameValidBinaryTestOutput(byte[] input)
        {
            IHARTFrame frame = new HARTFrame(input);
            var actual = frame.ToArray();
            CollectionAssert.AreEqual(input[0..frame.GetLength()], actual);
        }
        [DataRow( new byte[] { 0x82 }, (byte)0x00, AddressFormat.Polling)]
        [TestMethod]
        public void HARTFrameValidManualEntryTest(byte[] address, byte command, AddressFormat format)
        {
            IHARTFrame frame = new HARTFrame(address, command, format);
            Assert.IsInstanceOfType(frame, typeof(HARTFrame));
        }
        [DataRow(new byte[] { 0x82, 0xa6, 0x4e, 0x0b, 0x6f }, (byte)0x00)]
        [TestMethod]
        public void HARTFrameValidManualEntryTestOutput(byte[] address, byte command)
        {
            IHARTFrame frame = new HARTFrame(address, command);
            CollectionAssert.AreEqual(address, frame.GetAddress());
            Assert.AreEqual(command, frame.Command);
        }

    }
}