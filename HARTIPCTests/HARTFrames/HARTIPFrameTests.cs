using Microsoft.VisualStudio.TestTools.UnitTesting;
using HARTIPC;
using System;
using System.Collections.Generic;
using System.Text;

namespace HARTIPC.Tests
{
    [TestClass()]
    public class HARTIPFrameTests
    {
        [TestMethod()]
        [DataRow(new byte[] { 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0d, 0x01, 0x00, 0x09, 0x27, 0xc0 })]
        [DataRow(new byte[] { 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0d, 0x01, 0x00, 0x09, 0x27, 0xc0 })]
        [DataRow(new byte[] { 0x01, 0x00, 0x03, 0x00, 0x00, 0x02, 0x00, 0x0d, 0x02, 0x80, 0x00, 0x00, 0x82 })]
        [DataRow(new byte[] { 0x01, 0x01, 0x03, 0x00, 0x00, 0x02, 0x00, 0x25, 0x06, 0x80, 0x00, 0x18, 0x00, 0xd0, 0xfe, 0x26, 0x4e, 0x05, 0x07, 0x05, 0x02, 0x0e, 0x0c, 0x0b, 0x6f, 0xe4, 0x05, 0x04, 0x00, 0x02, 0x02, 0x00, 0x26, 0x00, 0x26, 0x84, 0xda })]
        [DataRow(new byte[] { 0x01, 0x00, 0x03, 0x00, 0x00, 0x03, 0x00, 0x11, 0x82, 0xa6, 0x4e, 0x0b, 0x6f, 0xe4, 0x14, 0x00, 0xfe })]
        [DataRow(new byte[] { 0x01, 0x01, 0x03, 0x00, 0x00, 0x03, 0x00, 0x33, 0x86, 0xa6, 0x4e, 0x0b, 0x6f, 0xe4, 0x14, 0x22, 0x00, 0xd0, 0x77, 0x69, 0x68, 0x61, 0x72, 0x74, 0x67, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09 })]
        [DataRow(new byte[] { 0x01, 0x00, 0x03, 0x00, 0x00, 0x04, 0x00, 0x11, 0x82, 0xa6, 0x4e, 0x0b, 0x6f, 0xe4, 0x4a, 0x00, 0xa0 })]
        [DataRow(new byte[] { 0x01, 0x01, 0x03, 0x00, 0x00, 0x04, 0x00, 0x1b, 0x86, 0xa6, 0x4e, 0x0b, 0x6f, 0xe4, 0x4a, 0x0a, 0x00, 0xd0, 0x01, 0x01, 0x1a, 0x00, 0x01, 0x02, 0x01, 0x03, 0x65 })]
        [DataRow(new byte[] { 0x01, 0x00, 0x03, 0x00, 0x00, 0x05, 0x00, 0x1a, 0x82, 0xa6, 0x4e, 0x0b, 0x6f, 0xe4, 0x1f, 0x09, 0x02, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb })]
        [DataRow(new byte[] { 0x01, 0x01, 0x03, 0x00, 0x00, 0x05, 0x00, 0x15, 0x86, 0xa6, 0x4e, 0x0b, 0x6f, 0xe4, 0x1f, 0x04, 0x40, 0xd0, 0x02, 0x15, 0x72 })]
        [DataRow(new byte[] { 0x01, 0x00, 0x02, 0x00, 0x00, 0x06, 0x00, 0x08 })]
        [DataRow(new byte[] { 0x01, 0x01, 0x02, 0x00, 0x00, 0x06, 0x00, 0x08 })]
        public void HARTIPFrameInputEqualTest(byte[] binary)
        {
            
            var actual = new HARTIPFrame(binary);
            if (actual.MessageID == MessageID.PDU)
                _ = new HARTFrame(actual.GetPayload());
        }
    }
}